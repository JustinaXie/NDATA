gamma_11[1:(P_1 * P)] <- exp(X_gen[1:(P_1 * P),] %*% beta)
gamma_12[1:(P_1 * P)] <- exp(X_gen[1:(P_1 * P),] %*% beta)
#risk gene for trait 1
gamma_11[(P_1 * P + 1):(P_0 * P)] <-
exp(X_gen[(P_1 * P + 1):(P_0 * P),] %*% beta)
gamma_12[(P_1 * P + 1):(P_0 * P)] <-
exp(X_gen[(P_1 * P + 1):(P_0 * P),] %*% beta)
#fixed risk setting
gamma_21 <- rep(1, P)
gamma_22 <- rep(1, P)
#pleiotropy
gamma_21[1:(P_1 * P)] <- exp(X_gen[1:(P_1 * P),] %*% beta)
gamma_22[1:(P_1 * P)] <- exp(X_gen[1:(P_1 * P),] %*% beta)
#risk gene for trait 2
gamma_21[(P_0 * P + 1):(2 * P_0 * P - P_1 * P)] <-
exp(X_gen[(P_0 * P + 1):(2 * P_0 * P - P_1 * P),] %*% beta)
gamma_22[(P_0 * P + 1):(2 * P_0 * P - P_1 * P)] <-
exp(X_gen[(P_0 * P + 1):(2 * P_0 * P - P_1 * P),] %*% beta)
#True response
response_t1 <- c(rep(1, P_0 * P), rep(0, (1 - P_0) * P))
response_t2 <-
c(rep(1, P_1 * P), rep(0, (P_0 * P - P_1 * P)), rep(1, (P_0 * P - P_1 *
P)), rep(0, (1 - 2 * P_0) * P + P_1 * P))
mu <- mut_lof + mut_dmis
set.seed(seed)
Y_11 <- rpois(P, 2 * N_1 * mut_lof * gamma_11)
Y_12 <- rpois(P, 2 * N_1 * mut_dmis * gamma_12)
Y_21 <- rpois(P, 2 * N_1 * mut_lof * gamma_21)
Y_22 <- rpois(P, 2 * N_1 * mut_dmis * gamma_22)
Y_1 <- Y_11 + Y_12
Y_2 <- Y_21 + Y_22
X_1 <- as.matrix(cbind(1, X, scale(Y_11)))
X_2 <- as.matrix(cbind(1, X, scale(Y_21)))
###############################################
######### First Round Estimation  #############
###############################################
time1 <- Sys.time()
#indicator
Z_no <- matrix(NA, P, 4)
#prior probability
pi_no <- runif(4)
pi_no <- pi_no / sum(pi_no)
pi_no_old <- rep(0, 4)
#effect sizes of annotation
beta0_1 <- beta0_2 <- 99999
beta0_1_new <- beta0_2_new <- 0
#####loop start######
k = 0
while (sum(abs(pi_no - pi_no_old)) + sum(abs(beta0_1 - beta0_1_new)) + sum(abs(beta0_2 -
beta0_2_new)) > 1e-3)
{
#print(paste("round", k+1, "start!"))
prob_1 <- matrix(NA, P, 4)
prob_1[, 1] <-
dpois(Y_1, 2 * N_1 * mu) * dpois(Y_2, 2 * N_1 * mu)
prob_1[, 2] <-
dpois(Y_1, 2 * N_1 * mu * exp(beta0_1_new)) * dpois(Y_2, 2 * N_1 * mu)
prob_1[, 3] <-
dpois(Y_1, 2 * N_1 * mu) * dpois(Y_2, 2 * N_1 * mu * exp(beta0_2_new))
prob_1[, 4] <-
dpois(Y_1, 2 * N_1 * mu * exp(beta0_1_new)) * dpois(Y_2, 2 * N_1 * mu *
exp(beta0_2_new))
prob <- prob_1
#update z (gene i)
prob_weighted <- prob %*% diag(pi_no)
Z_no <- prob_weighted / apply(prob_weighted, 1, sum)
#update pi_no
pi_no_old <- pi_no
pi_no <- apply(Z_no, 2, sum) / P
#update beta_1
beta0_1 <- beta0_1_new
beta0_1_new <-
log(sum((Z_no[, 2] + Z_no[, 4]) * Y_1) / sum((Z_no[, 2] + Z_no[, 4]) * 2 *
N_1 * mu))
#update beta_2
beta0_2 <- beta0_2_new
beta0_2_new <-
log(sum((Z_no[, 3] + Z_no[, 4]) * Y_2) / sum((Z_no[, 3] + Z_no[, 4]) * 2 *
N_1 * mu))
k <- k + 1
}
time2 <- Sys.time()
cat("proportion round 1", pi_no[4], "\n")
cat("proportion round 1", pi_no[2] + pi_no[4], "\n")
cat("proportion round 1", pi_no[3] + pi_no[4], "\n")
cat("baseline of trait 1 round 1", beta0_1_new, "\n")
cat("baseline of trait 2 round 1", beta0_2_new, "\n")
###############################################
################  init start  #################
###############################################
time3 <- Sys.time()
#indicator
Z <- matrix(NA, P, 4)
#prior probability
pi_old <- rep(0, 4)
pi <- pi_no
#effect sizes of annotation
beta_1 <- beta_2 <- rep(9999, 4)
beta_1_new <- c(beta0_1, 0, 0, 0)
beta_2_new <- c(beta0_2, 0, 0, 0)
beta_1_old <- beta_2_old <- rep(0.1, 4)
#####loop start######
k = 0
while (sum(abs(pi - pi_old)) + sum(abs(beta_1 - beta_1_old)) + sum(abs(beta_2_new -
beta_2_old)) > 1e-3)
{
print(paste("round", k + 1, "start!"))
prob_1 <- matrix(NA, P, 4)
prob_1[, 1] <-
dpois(Y_1, 2 * N_1 * mu) * dpois(Y_2, 2 * N_1 * mu)
prob_1[, 2] <-
dpois(Y_1, 2 * N_1 * mu * exp(X_1 %*% beta_1_new)) * dpois(Y_2, 2 * N_1 *
mu)
prob_1[, 3] <-
dpois(Y_1, 2 * N_1 * mu) * dpois(Y_2, 2 * N_1 * mu * exp(X_2 %*% beta_2_new))
prob_1[, 4] <-
dpois(Y_1, 2 * N_1 * mu * exp(X_1 %*% beta_1_new)) * dpois(Y_2, 2 * N_1 *
mu * exp(X_2 %*% beta_2_new))
prob <- prob_1
#update z (gene i)
prob_weighted <- prob %*% diag(pi)
Z <- prob_weighted / apply(prob_weighted, 1, sum)
#update pi
pi_old <- pi
pi <- apply(Z, 2, sum) / P
#update beta_1 by Newton's
m_1 <- 0
beta_1_old <- beta_1_new
while (sum(abs(beta_1_new - beta_1)) > 1e-3 & m_1 < 200)
{
# print(paste("beta1:", beta_1_new))
d_beta_1 <-
t(Y_1 * X_1 - as.vector(2 * N_1 * mu * exp(X_1 %*% beta_1_new)) * X_1) %*% (Z[, 2] +
Z[, 4])
dd_beta_1 <-
-t(X_1) %*% diag((Z[, 2] + Z[, 4]) * as.vector(2 * N_1 * mu * exp(X_1 %*%
beta_1_new))) %*% X_1
beta_1 <- beta_1_new
beta_1_new <- beta_1 - solve(dd_beta_1) %*% d_beta_1
m_1 <- m_1 + 1
}
#update beta_2 by Newton's
m_2 <- 0
beta_2_old <- beta_2_new
while (sum(abs(beta_2_new - beta_2)) > 1e-3 & m_2 < 200)
{
# print(paste("beta1:", beta_1_new))
d_beta_2 <-
t(Y_2 * X_2 - as.vector(2 * N_1 * mu * exp(X_2 %*% beta_2_new)) * X_2) %*% (Z[, 3] +
Z[, 4])
dd_beta_2 <-
-t(X_2) %*% diag((Z[, 3] + Z[, 4]) * as.vector(2 * N_1 * mu * exp(X_2 %*%
beta_2_new))) %*% X_2
beta_2 <- beta_2_new
beta_2_new <- beta_2 - solve(dd_beta_2) %*% d_beta_2
m_2 <- m_2 + 1
}
k <- k + 1
}
time4 <- Sys.time()
time5 <- Sys.time()
lfdr_t1 <- data.frame(index = 1:P,
Z_no = Z_no[, 1] + Z_no[, 3],
Z = Z[, 1] + Z[, 3])
lfdr_order_no_t1 <-
lfdr_t1[order(lfdr_t1$Z_no, decreasing = FALSE),]
lfdr_order_no_t1$FDR_no_t1 <-
cumsum(lfdr_order_no_t1$Z_no) / (1:P)
tmp_no_t1 <-
lfdr_order_no_t1[order(lfdr_order_no_t1$index, decreasing = FALSE),]
tmp_FDR_no_t1 <- tmp_no_t1$FDR_no_t1
error_no_t1 <-
sum(tmp_FDR_no_t1[-c(1:(P_0 * P))] < threshold) / (P - P * P_0)
power_no_t1 <-
sum(tmp_FDR_no_t1[1:(P_0 * P)] < threshold) / (P * P_0)
fdr_no_t1 <-
sum(tmp_FDR_no_t1[-c(1:(P_0 * P))] < threshold) / sum(tmp_FDR_no_t1 < threshold)
time6 <- Sys.time()
lfdr_order_anno_t1 <-
lfdr_t1[order(lfdr_t1$Z, decreasing = FALSE),]
lfdr_order_anno_t1$FDR_anno_t1 <-
cumsum(lfdr_order_anno_t1$Z) / (1:P)
tmp_anno_t1 <-
lfdr_order_anno_t1[order(lfdr_order_anno_t1$index, decreasing = FALSE),]
tmp_FDR_anno_t1 <- tmp_anno_t1$FDR_anno_t1
time7 <- Sys.time()
error_anno_t1 <-
sum(tmp_FDR_anno_t1[-c(1:(P_0 * P))] < threshold) / (P - P * P_0)
power_anno_t1 <-
sum(tmp_FDR_anno_t1[1:(P_0 * P)] < threshold) / (P * P_0)
fdr_anno_t1 <-
sum(tmp_FDR_anno_t1[-c(1:(P_0 * P))] < threshold) / sum(tmp_FDR_anno_t1 < threshold)
print(paste0("The Power of no annotation model is ", power_no_t1))
print(paste0("The FDP is of no annotation model is ", fdr_no_t1))
print(paste0("The Power of annotation model is ", power_anno_t1))
print(paste0("The FDP is of annotation model is ", fdr_anno_t1))
rm(list = ls())
# load("/ysm-gpfs/pi/zhao/yx325/MTADA/simulation/comparison/0804/envir_0804.RData")
# load("/Users/justinatse/Desktop/2020Fall/Research/MTADA/Simulation/Comparison/0804/envir_0804.RData")
library(dplyr)
library(ggplot2)
library(readr)
library(pROC)
# setwd("/Users/justinatse/Desktop/2020Fall/Research/MTADA/Simulation/Comparison/0819")
# write.table(dnm,file="dnm.txt",quote = FALSE,row.names = FALSE)
# write.table(X_gen,file="X_gen.txt",quote = FALSE,row.names = FALSE,col.names = FALSE)
# setwd("")
dnm<-read.table("dnm.txt",header = TRUE)
X_gen<-read.table("X_gen.txt",header =FALSE)
X_gen<-as.matrix(X_gen)
X <- X_gen[,2:3]
mut_lof<-dnm$mut_lof
mut_dmis<-dnm$mut_dmis
P<-10000
# args <- commandArgs(trailingOnly = TRUE)
# for(i in 1:length(args)){
#   eval(parse(text=args[[i]]))
# }
#fdr threshold
threshold <- 0.05
P_0 <- 0.1
N_1 <- 2000
beta <- c(4,0.3,0.3,0.3)
# beta <- list(c(4,0.1,0.1,0.1),c(4,0.3,0.3,0.3),c(4,0.5,0.5,0.5))
P_1 <- 0.03
mut_lof[424]<- 3.211e-06
mut_dmis[424]<- 4.010e-06
gamma_11 <- rep(1, P)
gamma_12 <- rep(1, P)
#risk gene for trait 1
gamma_11[1:(P_1 * P)] <- exp(X_gen[1:(P_1 * P),] %*% beta)
gamma_12[1:(P_1 * P)] <- exp(X_gen[1:(P_1 * P),] %*% beta)
#risk gene for trait 1
gamma_11[(P_1 * P + 1):(P_0 * P)] <-
exp(X_gen[(P_1 * P + 1):(P_0 * P),] %*% beta)
gamma_12[(P_1 * P + 1):(P_0 * P)] <-
exp(X_gen[(P_1 * P + 1):(P_0 * P),] %*% beta)
#fixed risk setting
gamma_21 <- rep(1, P)
gamma_22 <- rep(1, P)
#pleiotropy
gamma_21[1:(P_1 * P)] <- exp(X_gen[1:(P_1 * P),] %*% beta)
gamma_22[1:(P_1 * P)] <- exp(X_gen[1:(P_1 * P),] %*% beta)
#risk gene for trait 2
gamma_21[(P_0 * P + 1):(2 * P_0 * P - P_1 * P)] <-
exp(X_gen[(P_0 * P + 1):(2 * P_0 * P - P_1 * P),] %*% beta)
gamma_22[(P_0 * P + 1):(2 * P_0 * P - P_1 * P)] <-
exp(X_gen[(P_0 * P + 1):(2 * P_0 * P - P_1 * P),] %*% beta)
#True response
response_t1 <- c(rep(1, P_0 * P), rep(0, (1 - P_0) * P))
response_t2 <-
c(rep(1, P_1 * P), rep(0, (P_0 * P - P_1 * P)), rep(1, (P_0 * P - P_1 *
P)), rep(0, (1 - 2 * P_0) * P + P_1 * P))
mu <- mut_lof + mut_dmis
set.seed(seed)
Y_11 <- rpois(P, 2 * N_1 * mut_lof * gamma_11)
Y_12 <- rpois(P, 2 * N_1 * mut_dmis * gamma_12)
Y_21 <- rpois(P, 2 * N_1 * mut_lof * gamma_21)
Y_22 <- rpois(P, 2 * N_1 * mut_dmis * gamma_22)
Y_1 <- Y_11 + Y_12
Y_2 <- Y_21 + Y_22
X_1 <- as.matrix(cbind(1, X, scale(Y_11)))
X_2 <- as.matrix(cbind(1, X, scale(Y_21)))
###############################################
######### First Round Estimation  #############
###############################################
time1 <- Sys.time()
#indicator
Z_no <- matrix(NA, P, 4)
#prior probability
pi_no <- runif(4)
pi_no <- pi_no / sum(pi_no)
pi_no_old <- rep(0, 4)
#effect sizes of annotation
beta0_1 <- beta0_2 <- 99999
beta0_1_new <- beta0_2_new <- 0
#####loop start######
k = 0
while (sum(abs(pi_no - pi_no_old)) + sum(abs(beta0_1 - beta0_1_new)) + sum(abs(beta0_2 -
beta0_2_new)) > 1e-3)
{
#print(paste("round", k+1, "start!"))
prob_1 <- matrix(NA, P, 4)
prob_1[, 1] <-
dpois(Y_1, 2 * N_1 * mu) * dpois(Y_2, 2 * N_1 * mu)
prob_1[, 2] <-
dpois(Y_1, 2 * N_1 * mu * exp(beta0_1_new)) * dpois(Y_2, 2 * N_1 * mu)
prob_1[, 3] <-
dpois(Y_1, 2 * N_1 * mu) * dpois(Y_2, 2 * N_1 * mu * exp(beta0_2_new))
prob_1[, 4] <-
dpois(Y_1, 2 * N_1 * mu * exp(beta0_1_new)) * dpois(Y_2, 2 * N_1 * mu *
exp(beta0_2_new))
prob <- prob_1
#update z (gene i)
prob_weighted <- prob %*% diag(pi_no)
Z_no <- prob_weighted / apply(prob_weighted, 1, sum)
#update pi_no
pi_no_old <- pi_no
pi_no <- apply(Z_no, 2, sum) / P
#update beta_1
beta0_1 <- beta0_1_new
beta0_1_new <-
log(sum((Z_no[, 2] + Z_no[, 4]) * Y_1) / sum((Z_no[, 2] + Z_no[, 4]) * 2 *
N_1 * mu))
#update beta_2
beta0_2 <- beta0_2_new
beta0_2_new <-
log(sum((Z_no[, 3] + Z_no[, 4]) * Y_2) / sum((Z_no[, 3] + Z_no[, 4]) * 2 *
N_1 * mu))
k <- k + 1
}
time2 <- Sys.time()
cat("proportion round 1", pi_no[4], "\n")
cat("proportion round 1", pi_no[2] + pi_no[4], "\n")
cat("proportion round 1", pi_no[3] + pi_no[4], "\n")
cat("baseline of trait 1 round 1", beta0_1_new, "\n")
cat("baseline of trait 2 round 1", beta0_2_new, "\n")
###############################################
################  init start  #################
###############################################
time3 <- Sys.time()
#indicator
Z <- matrix(NA, P, 4)
#prior probability
pi_old <- rep(0, 4)
pi <- pi_no
#effect sizes of annotation
beta_1 <- beta_2 <- rep(9999, 4)
beta_1_new <- c(beta0_1, 0, 0, 0)
beta_2_new <- c(beta0_2, 0, 0, 0)
beta_1_old <- beta_2_old <- rep(0.1, 4)
#####loop start######
k = 0
while (sum(abs(pi - pi_old)) + sum(abs(beta_1 - beta_1_old)) + sum(abs(beta_2_new -
beta_2_old)) > 1e-3)
{
print(paste("round", k + 1, "start!"))
prob_1 <- matrix(NA, P, 4)
prob_1[, 1] <-
dpois(Y_1, 2 * N_1 * mu) * dpois(Y_2, 2 * N_1 * mu)
prob_1[, 2] <-
dpois(Y_1, 2 * N_1 * mu * exp(X_1 %*% beta_1_new)) * dpois(Y_2, 2 * N_1 *
mu)
prob_1[, 3] <-
dpois(Y_1, 2 * N_1 * mu) * dpois(Y_2, 2 * N_1 * mu * exp(X_2 %*% beta_2_new))
prob_1[, 4] <-
dpois(Y_1, 2 * N_1 * mu * exp(X_1 %*% beta_1_new)) * dpois(Y_2, 2 * N_1 *
mu * exp(X_2 %*% beta_2_new))
prob <- prob_1
#update z (gene i)
prob_weighted <- prob %*% diag(pi)
Z <- prob_weighted / apply(prob_weighted, 1, sum)
#update pi
pi_old <- pi
pi <- apply(Z, 2, sum) / P
#update beta_1 by Newton's
m_1 <- 0
beta_1_old <- beta_1_new
while (sum(abs(beta_1_new - beta_1)) > 1e-3 & m_1 < 200)
{
# print(paste("beta1:", beta_1_new))
d_beta_1 <-
t(Y_1 * X_1 - as.vector(2 * N_1 * mu * exp(X_1 %*% beta_1_new)) * X_1) %*% (Z[, 2] +
Z[, 4])
dd_beta_1 <-
-t(X_1) %*% diag((Z[, 2] + Z[, 4]) * as.vector(2 * N_1 * mu * exp(X_1 %*%
beta_1_new))) %*% X_1
beta_1 <- beta_1_new
beta_1_new <- beta_1 - solve(dd_beta_1) %*% d_beta_1
m_1 <- m_1 + 1
}
#update beta_2 by Newton's
m_2 <- 0
beta_2_old <- beta_2_new
while (sum(abs(beta_2_new - beta_2)) > 1e-3 & m_2 < 200)
{
# print(paste("beta1:", beta_1_new))
d_beta_2 <-
t(Y_2 * X_2 - as.vector(2 * N_1 * mu * exp(X_2 %*% beta_2_new)) * X_2) %*% (Z[, 3] +
Z[, 4])
dd_beta_2 <-
-t(X_2) %*% diag((Z[, 3] + Z[, 4]) * as.vector(2 * N_1 * mu * exp(X_2 %*%
beta_2_new))) %*% X_2
beta_2 <- beta_2_new
beta_2_new <- beta_2 - solve(dd_beta_2) %*% d_beta_2
m_2 <- m_2 + 1
}
k <- k + 1
}
time4 <- Sys.time()
time5 <- Sys.time()
lfdr_t1 <- data.frame(index = 1:P,
Z_no = Z_no[, 1] + Z_no[, 3],
Z = Z[, 1] + Z[, 3])
lfdr_order_no_t1 <-
lfdr_t1[order(lfdr_t1$Z_no, decreasing = FALSE),]
lfdr_order_no_t1$FDR_no_t1 <-
cumsum(lfdr_order_no_t1$Z_no) / (1:P)
tmp_no_t1 <-
lfdr_order_no_t1[order(lfdr_order_no_t1$index, decreasing = FALSE),]
tmp_FDR_no_t1 <- tmp_no_t1$FDR_no_t1
error_no_t1 <-
sum(tmp_FDR_no_t1[-c(1:(P_0 * P))] < threshold) / (P - P * P_0)
power_no_t1 <-
sum(tmp_FDR_no_t1[1:(P_0 * P)] < threshold) / (P * P_0)
fdr_no_t1 <-
sum(tmp_FDR_no_t1[-c(1:(P_0 * P))] < threshold) / sum(tmp_FDR_no_t1 < threshold)
time6 <- Sys.time()
lfdr_order_anno_t1 <-
lfdr_t1[order(lfdr_t1$Z, decreasing = FALSE),]
lfdr_order_anno_t1$FDR_anno_t1 <-
cumsum(lfdr_order_anno_t1$Z) / (1:P)
tmp_anno_t1 <-
lfdr_order_anno_t1[order(lfdr_order_anno_t1$index, decreasing = FALSE),]
tmp_FDR_anno_t1 <- tmp_anno_t1$FDR_anno_t1
time7 <- Sys.time()
error_anno_t1 <-
sum(tmp_FDR_anno_t1[-c(1:(P_0 * P))] < threshold) / (P - P * P_0)
power_anno_t1 <-
sum(tmp_FDR_anno_t1[1:(P_0 * P)] < threshold) / (P * P_0)
fdr_anno_t1 <-
sum(tmp_FDR_anno_t1[-c(1:(P_0 * P))] < threshold) / sum(tmp_FDR_anno_t1 < threshold)
print(paste0("The Power of no annotation model is ", power_no_t1))
print(paste0("The FDP is of no annotation model is ", fdr_no_t1))
print(paste0("The Power of annotation model is ", power_anno_t1))
print(paste0("The FDP is of annotation model is ", fdr_anno_t1))
setwd("/Users/justinatse/Desktop/2020Fall/Research/TADA-R/")
source("TADA_v4.R")
setwd("/Users/justinatse/Desktop/2020Fall/Research/TADA-R/tada/")
source("TADA_v4.R")
### read mutation data
### read mutation data
tada.file="3805_cases_prob_and_counts.txt"
tada.data=read.table(tada.file,header=T)
tada.data_full = tada.data
colnames(tada.data_full) <- c("gene.id", "mut.lof", "mut.dmis", "mut.tmis", "mut.syn", "dn.lof", "dn.dmis", "dn.tmis", "dn.syn", "trans.lof", "trans.dmis", "trans.tmis", "trans.syn", "ntrans.lof", "ntrans.dmis", "ntrans.tmis", "ntrans.syn", "ntrans2.lof", "ntrans2.dmis", "ntrans2.tmis", "ntrans2.syn", "trans2.lof", "trans2.dmis", "trans2.tmis", "trans2.syn", "probandhom.lof", "probandhom.dmis", "probandhom.tmis", "probandhom.syn", "probandrg.lof", "probandrg.dmis", "probandrg.tmis", "probandrg.syn", "probanddnhom.lof", "probanddnhom.dmis", "probanddnhom.tmis", "probanddnhom.syn")
### read mutation data
### read mutation data
tada.file="3805_cases_prob_and_counts.txt"
tada.data=read.table(tada.file,header=T)
setwd("/Users/justinatse/Desktop/2020Fall/Research/MTADA/Simulation/Comparison/0817/")
result_multi<-read.csv("result_enrichment_small_samplesizes_gamma_25_beta_-3_0.5_1_1.5.csv")
N_series<-c(2000,5000,10000)
beta_series<-list(c(-3,0.5),c(-3,1),c(-3,1.5))
mm_total<-50
N_series<-c(1000,2000,4000)
beta_series<-list(c(-3,0.5),c(-3,1),c(-3,1.5))
mm_total<-50
# result_multi$N_1 <- c(rep(2000,750),rep(5000,750),rep(10000,750))
# result_multi$P_1 <- c(rep(P_series[1], mm_total), rep(P_series[2], mm_total), rep(P_series[3], mm_total),rep(P_series[4], mm_total),rep(P_series[5], mm_total))
# result_multi$beta <- rep(c(rep(0.1,250),rep(0.3,250),rep(0.5,250)),3)
# setwd("/Users/justinatse/Desktop/2020Fall/Research/MTADA/Manuscript/Reviewer/Tables/")
# write.csv(result_multi,file = "Power.csv",row.names = FALSE,quote = FALSE)
result_multi$X<-1:450
result_multi1<-reshape2::melt(result_multi,id.vars="X",measure.vars= c("power_no_t1","power_anno_t1"))
colnames(result_multi1)<-c("X","Model","Power")
result_multi1$N_setting<-factor(rep(as.character(result_multi$N_setting),2),levels = c("2000","5000","10000"))
result_multi1$beta_setting<-factor(rep(as.character(result_multi$beta_setting),2),levels = c("0.5","1","1.5"),labels = c("small","moderate","large"))
plot.list6 <-ggplot(result_multi1, aes(x=(beta_setting), y=Power,col=Model))+geom_boxplot() +
ylab("Power")+xlab("Effect Size")+ labs(color = "Model")+ylim(0,0.8)+ facet_grid(cols = vars(factor(N_setting)))+
scale_color_manual(labels=c("Multi No","Multi Anno"),values = c("#52854C","#4E84C4"))
result_multi2<-reshape2::melt(result_multi,id.vars="X",measure.vars= c("fdr_no_t1","fdr_anno_t1"))
colnames(result_multi2)<-c("X","Model","FDR")
result_multi2$N_setting<-factor(rep(as.character(result_multi$N_setting),2),levels = c("2000","5000","10000"))
result_multi2$beta_setting<-factor(rep(as.character(result_multi$beta_setting),2),levels = c("0.5","1","1.5"),labels = c("small","moderate","large"))
plot.list7<-ggplot(result_multi2, aes(x=factor(beta_setting), y=FDR,col=Model))+geom_boxplot() +
ylab("FDR")+xlab("Effect Size")+ labs(color = "Model")+ylim(0,0.1)+ facet_grid(cols = vars(factor(N_setting)))+
geom_hline(yintercept=0.05, color = "red",linetype="dashed")+scale_color_manual(labels=c("Multi No","Multi Anno"),values = c("#52854C","#4E84C4"))
ggarrange(plot.list6,
plot.list7,
ncol = 1, nrow = 2,
common.legend = TRUE, legend = "top")
result_multi$N_setting
# result_multi$N_1 <- c(rep(2000,750),rep(5000,750),rep(10000,750))
# result_multi$P_1 <- c(rep(P_series[1], mm_total), rep(P_series[2], mm_total), rep(P_series[3], mm_total),rep(P_series[4], mm_total),rep(P_series[5], mm_total))
# result_multi$beta <- rep(c(rep(0.1,250),rep(0.3,250),rep(0.5,250)),3)
# setwd("/Users/justinatse/Desktop/2020Fall/Research/MTADA/Manuscript/Reviewer/Tables/")
# write.csv(result_multi,file = "Power.csv",row.names = FALSE,quote = FALSE)
result_multi$X<-1:450
result_multi1<-reshape2::melt(result_multi,id.vars="X",measure.vars= c("power_no_t1","power_anno_t1"))
colnames(result_multi1)<-c("X","Model","Power")
result_multi1$N_setting<-factor(rep(as.character(result_multi$N_setting),2),levels = c("1000","2000","4000"))
result_multi1$beta_setting<-factor(rep(as.character(result_multi$beta_setting),2),levels = c("0.5","1","1.5"),labels = c("small","moderate","large"))
plot.list6 <-ggplot(result_multi1, aes(x=(beta_setting), y=Power,col=Model))+geom_boxplot() +
ylab("Power")+xlab("Effect Size")+ labs(color = "Model")+ylim(0,0.8)+ facet_grid(cols = vars(factor(N_setting)))+
scale_color_manual(labels=c("Multi No","Multi Anno"),values = c("#52854C","#4E84C4"))
plot.list6
plot.list6 <-ggplot(result_multi1, aes(x=(beta_setting), y=Power,col=Model))+geom_boxplot() +
ylab("Power")+xlab("Effect Size")+ labs(color = "Model")+ylim(0,0.6)+ facet_grid(cols = vars(factor(N_setting)))+
scale_color_manual(labels=c("Multi No","Multi Anno"),values = c("#52854C","#4E84C4"))
plot.list6
result_multi2<-reshape2::melt(result_multi,id.vars="X",measure.vars= c("fdr_no_t1","fdr_anno_t1"))
colnames(result_multi2)<-c("X","Model","FDR")
result_multi2$N_setting<-factor(rep(as.character(result_multi$N_setting),2),levels = c("1000","2000","4000"))
result_multi2$beta_setting<-factor(rep(as.character(result_multi$beta_setting),2),levels = c("0.5","1","1.5"),labels = c("small","moderate","large"))
plot.list7<-ggplot(result_multi2, aes(x=factor(beta_setting), y=FDR,col=Model))+geom_boxplot() +
ylab("FDR")+xlab("Effect Size")+ labs(color = "Model")+ylim(0,0.1)+ facet_grid(cols = vars(factor(N_setting)))+
geom_hline(yintercept=0.05, color = "red",linetype="dashed")+scale_color_manual(labels=c("Multi No","Multi Anno"),values = c("#52854C","#4E84C4"))
plot.list7
plot.list7<-ggplot(result_multi2, aes(x=factor(beta_setting), y=FDR,col=Model))+geom_boxplot() +
ylab("FDR")+xlab("Effect Size")+ labs(color = "Model")+ylim(0,0.15)+ facet_grid(cols = vars(factor(N_setting)))+
geom_hline(yintercept=0.05, color = "red",linetype="dashed")+scale_color_manual(labels=c("Multi No","Multi Anno"),values = c("#52854C","#4E84C4"))
plot.list7
ggarrange(plot.list6,
plot.list7,
ncol = 1, nrow = 2,
common.legend = TRUE, legend = "top")
ggsave("/Users/justinatse/Desktop/2020Fall/Research/MTADA/Manuscript/Reviewer/Figures/New/Enrichment_smallsamples_gamma_25_3_0.5.tiff",
width = 10, height = 8, device='tiff', dpi=700)
getwd()
library(devtools)
document()
